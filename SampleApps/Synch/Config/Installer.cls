Include %occInclude
/// Simple example of installation instructions (Manifest)
Class SampleApps.Synch.Config.Installer
{

XData SynchManifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
	<Default Name="NamespaceMaster" Value="MASTER"/>
	<Default Name="MasterAppREST" Value="/synchmaster/rest/v1" />
	<Default Name="ClientAppREST" Value = "/synchclient/rest/v1" />
 	<Default Name="InstallingFromNS" Value="USER"/>
 	<Default Name="SourceCodeFolder" Value="SampleApps"/>
 	<Default Name="InstallDir" Value="c:/Temp"/>
 	<Default Name="NamespaceClient" Value="CLIENT" />
 	<Default Name="Resource" Value="%DB_DEFAULT"/>

 	<Var Name="GlobalMaster" Value="${NamespaceMaster}DB"/>
  	<Var Name="GlobalClient" Value="${NamespaceClient}DB"/>
 	<Var Name="DispatchClass" Value="SampleApps.Synch.API.v1.RestLegacy"/>
 	
 	<Log Level="3" Text="Defining MASTER namespace and DBs..."/>
    <Namespace Name="${NamespaceMaster}" Create="overwrite" Ensemble="0" Code="${GlobalMaster}" Data="${GlobalMaster}">
	    <Configuration>
	        <Database Name="${GlobalMaster}" Create="overwrite" Dir="${InstallDir}/${GlobalMaster}" Resource="${Resource}"/>
	       	<Database Name="${GlobalClient}" Create="overwrite" Dir="${InstallDir}/${GlobalClient}" Resource="${Resource}" />
	    </Configuration>
	    <Log Level="3" Text="Importing source code..."/> 
	    <Import File="${InstallDir}/${SourceCodeFolder}" Recurse="1"/> 
	    <CSPApplication Url="${MasterAppREST}" Description="API for Synch Sample" DispatchClass="${DispatchClass}" Directory="${InstallDir}/${GlobalMaster}/rest/v1" CSPZENEnabled="1" Grant="%DB_%DEFAULT" CookiePath="${MasterAppREST}" AuthenticationMethods="32"/>
      <Invoke Class="SampleApps.Synch.Util" Method="Restart" />
    </Namespace>

    <Log Level="3" Text="Dismounting databases temporarely..."/>
  	<Invoke Class="SYS.Database" Method="DismountDatabase" CheckStatus="1" Return="tDismountSC">
    	<Arg Value="${InstallDir}/${GlobalMaster}" />
   	</Invoke>
  	<Invoke Class="SYS.Database" Method="DismountDatabase" CheckStatus="0" Return="tDismountSC">
    	<Arg Value="${InstallDir}/${GlobalClient}" />
   	</Invoke>
   	
   	<Log Level="3" Text="Replicating data from MASTER to CLIENT..."/>
   	<CopyDir Src="${InstallDir}/${GlobalMaster}" Target="${InstallDir}/${GlobalClient}"/>

   	<Log Level="3" Text="Mounting databases..."/>
   	<Invoke Class="SYS.Database" Method="MountDatabase" CheckStatus="1" Return="tMountSC">
    	<Arg Value="${InstallDir}/${GlobalMaster}" />
   	</Invoke>
   	<Invoke Class="SYS.Database" Method="MountDatabase" CheckStatus="1" Return="tMountSC">
    	<Arg Value="${InstallDir}/${GlobalClient}" />
   	</Invoke>
   	
   	<Log Level="3" Text="Defining CLIENT namespace..." />
    <Namespace Name="${NamespaceClient}" Create="overwrite" Ensemble="0" Code="${GlobalClient}" Data="${GlobalClient}">
	    <Configuration>
	       	<Database Name="${GlobalClient}" Create="no" Dir="${InstallDir}/${GlobalClient}" Resource="${Resource}" />
	    </Configuration>
	    <CSPApplication Url="${ClientAppREST}" Description="API for Synch Sample" DispatchClass="${DispatchClass}" Directory="${InstallDir}/${GlobalClient}/rest/v1" CSPZENEnabled="1" Grant="%DB_%DEFAULT" CookiePath="${ClientAppREST}" AuthenticationMethods="32"/>
    </Namespace>

    <Log Level="3" Text="Configuring Web Apps as REST server end-point..."/>
    <Namespace Name="${InstallingFromNS}" Create="no">
	   	<Invoke Class="SampleApps.Synch.Config.Installer" Method="CSPAppConfigureAsREST" CheckStatus="1" Return="tRESTappSC">
	    	<Arg Value="${MasterAppREST}" />
	    	<Arg Value="${DispatchClass}" />
	   	</Invoke>
	   	<Invoke Class="SampleApps.Synch.Config.Installer" Method="CSPAppConfigureAsREST" CheckStatus="1" Return="tRESTappSC">
	    	<Arg Value="${ClientAppREST}" />
	    	<Arg Value="${DispatchClass}" />
	   	</Invoke>
   	</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, 
   pInstaller As %Installer.Installer, 
   pLogger As %Installer.AbstractLogger) 
   As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, 
    %code, "SynchManifest")
}

ClassMethod CSPAppConfigureAsREST(pApplication as %String,pDispatchClass as %String) as %Status
{
	#dim tSC as %Status = $$$OK
	#dim e as %Exception.AbstractException
	#dim tApp as Security.Applications
	
	try
	{
		new $namespace
		set $namespace = "%SYS"
		set tApp = ##class(Security.Applications).%OpenId(pApplication,,.tSC)
		set tApp.DispatchClass = pDispatchClass
		set tApp.Recurse = 1
		set tApp.IsNameSpaceDefault = 0
		set tApp.Path=""
		set tApp.UseCookies = 1

		set tSC = tApp.%Save()
	}
	catch e
	{
		set tSC = e.AsStatus()
	}
	
	quit tSC
}




}